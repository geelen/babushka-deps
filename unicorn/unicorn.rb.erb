# <%= generated_by_babushka %>

worker_processes <%= var(:num_unicorn_workers) %>
working_directory "<%= var(:absolute_rails_root) %>"

# This loads the application in the master process before forking
# worker processes
# Read more about it here:
# http://unicorn.bogomips.org/Unicorn/Configurator.html
preload_app true

timeout <%= var(:timeout) %>

# This is where we specify the socket.
# We will point the upstream Nginx module to this socket later on
listen "<%= var(:app_pid_dir) %>/unicorn.sock", :backlog => 64

pid "<%= var(:app_pid_dir) %>/unicorn.pid"

# Set the path of the log files inside the log folder of the testapp
stderr_path "<%= var(:app_log_dir) %>/unicorn.stderr.log"
stdout_path "<%= var(:app_log_dir) %>/unicorn.stdout.log"

# combine REE with "preload_app true" for memory savings
# http://rubyenterpriseedition.com/faq.html#adapt_apps_for_cow
preload_app true
GC.respond_to?(:copy_on_write_friendly=) and
  GC.copy_on_write_friendly = true

before_fork do |server, worker|
# This option works in together with preload_app true setting
# What is does is prevent the master process from holding
# the database connection
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.connection.disconnect!
end

after_fork do |server, worker|
# Here we are establishing the connection after forking worker
# processes
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.establish_connection

  uid, gid = Process.euid, Process.egid
  user, group = '<%= var :app_name %>', '<%= var :app_name %>'
  target_uid = Etc.getpwnam(user).uid
  target_gid = Etc.getgrnam(group).gid
  worker.tmp.chown(target_uid, target_gid)
  if uid != target_uid || gid != target_gid
    Process.initgroups(user, target_gid)
    Process::GID.change_privilege(target_gid)
    Process::UID.change_privilege(target_uid)
  end

  child_pid = "<%= var(:app_pid_dir) %>/unicorn_#{worker.nr}.pid"
  open(child_pid,'w') {|f| f << $$}
end
